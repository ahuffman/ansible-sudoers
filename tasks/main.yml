---
- name: Define root group
  vars:
    distribution_groups:
      MacOSX: wheel
  set_fact:
    sudoers_root_group: "{{ distribution_groups[ansible_distribution] | default('root') }}"
  when: sudoers_root_group is not defined

- name: "Ensure sudo is installed"
  package:
    name: "sudo"
    state: "present"
  retries: "3"
  register: "sudo_installed"
  until: "sudo_installed is succeeded"
  when: ansible_distribution != 'MacOSX'
  become: True

- name: "Set include directories variable"
  set_fact:
    sudoers_include_dirs: "{{ sudoers_files | json_query('[*].include_directories') | flatten }}"

- name: "Set sudoer file paths variable"
  set_fact:
    sudoers_file_paths: "{{ sudoers_files | json_query('[*].path') | flatten }}"

- name: "Display all sudoers include directories"
  debug:
    var: "sudoers_include_dirs"
    verbosity: "1"

- name: "Display all sudoers file paths"
  debug:
    var: "sudoers_file_paths"
    verbosity: "1"

- name: "Ensure include directories are created"
  file:
    path: "{{ item }}"
    owner: "root"
    group: "{{ sudoers_root_group }}"
    mode: "0750"
    state: "directory"
  with_items: "{{ sudoers_include_dirs }}"
  become: True
  when: "sudoers_include_dirs | length > 0"

# We want to pull the remote sudoer files to the ansible control node
##  To prevent includedirs from accidentally activating backed up copies
- name: "Ensure local backup directory exists"
  file:
    state: "directory"
    path: "{{ sudoers_backup_path }}"
    mode: "0755"
  delegate_to: "localhost"
  connection: "local"
  when:
    - "sudoers_backup | bool"
    - "sudoers_backup_path != ''"

- name: "Backup sudoers files"
  fetch:
    dest: "{{ sudoers_backup_path }}"
    fail_on_missing: False
    src: "{{ item }}"
  with_items: "{{ sudoers_file_paths }}"
  become: True
  when:
    - "sudoers_backup | bool"
    - "sudoers_backup_path != ''"

# included files get created first, because if using #include <file>
##   visudo will not validate since the file does not exist yet (if new)
- name: "Ensure sudoers include files are configured"
  template:
    src: "sudoers.j2"
    dest: "{{ item.path }}"
    owner: "root"
    group: "{{ sudoers_root_group }}"
    mode: "0440"
    validate: '{{ sudoers_visudo_path }} -cf %s'
  with_items: "{{ sudoers_files }}"
  become: True
  loop_control:
    label: "{{ item.path }}"
  when: "item.path != '/etc/sudoers'"

- name: "Ensure /etc/sudoers is configured"
  template:
    src: "sudoers.j2"
    dest: "/etc/sudoers"
    owner: "root"
    group: "{{ sudoers_root_group }}"
    mode: "0440"
    validate: '{{ sudoers_visudo_path }} -cf %s'
  with_items: "{{ sudoers_files }}"
  become: True
  loop_control:
    label: "{{ item.path }}"
  when:
    - "item.path == '/etc/sudoers'"
    - "sudoers_rewrite_default_sudoers_file | bool"

# cleanup files in include_dirs that aren't listed in sudoers_files
- name: "Remove unauthorized included sudoer files"
  block:
    - name: "Search for sudoer files in included directories"
      find:
        paths: "{{ sudoers_include_dirs }}"
        recurse: True
        hidden: True
        file_type: "any"
      register: "sudoers_existing_included_files"

    - name: "Set unauthorized included sudoers files variable"
      set_fact:
        sudoers_unauthorized_files: "{{ sudoers_existing_included_files | json_query('files[*].path') |
            difference(sudoers_file_paths) }}"

    - name: "Display unauthorized sudoers include files to be removed"
      debug:
        var: "sudoers_unauthorized_files"
        verbosity: "1"

    - name: "Remove unauthorized included sudoers files"
      file:
        path: "{{ item }}"
        state: "absent"
      with_items: "{{ sudoers_unauthorized_files }}"
      when: "sudoers_unauthorized_files | length > 0"
  become: True
  when:
    - "sudoers_remove_unauthorized_included_files | bool"
    - "sudoers_include_dirs | length > 0"
